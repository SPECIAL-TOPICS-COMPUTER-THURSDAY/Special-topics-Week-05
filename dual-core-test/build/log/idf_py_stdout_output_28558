Command: ninja all
[1/13] Performing build step for 'bootloader'
[1/1] cd /project/dual-core-test/build/bootloader && /opt/esp/python_env/idf6.0_py3.12_env/bin/python /opt/esp/idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 /project/dual-core-test/build/bootloader/bootloader.bin
Bootloader binary size 0x6690 bytes. 0x970 bytes (8%) free.
[2/13] No install step for 'bootloader'
[3/13] Linking C static library esp-idf/mqtt/libmqtt.a
[4/13] Completed 'bootloader'
[5/13] Linking C static library esp-idf/spiffs/libspiffs.a
[6/13] Linking C static library esp-idf/wifi_provisioning/libwifi_provisioning.a
[7/13] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/dual-core-test.c.obj
[8/13] Linking C static library esp-idf/main/libmain.a
[9/13] Generating esp-idf/esp_system/ld/sections.ld
[10/13] Building C object CMakeFiles/dual-core-test.elf.dir/project_elf_src_esp32.c.obj
[11/13] Linking CXX executable dual-core-test.elf
[12/13] Generating binary image from built executable
esptool.py v4.9.0
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated /project/dual-core-test/build/dual-core-test.bin
[13/13] cd /project/dual-core-test/build && /opt/esp/python_env/idf6.0_py3.12_env/bin/python /opt/esp/idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /project/dual-core-test/build/partition_table/partition-table.bin /project/dual-core-test/build/dual-core-test.bin
dual-core-test.bin binary size 0x2bc30 bytes. Smallest app partition is 0x100000 bytes. 0xd43d0 bytes (83%) free.
